class c{static instance;mockMatches=[];mockPlayers=[];constructor(){this.initializeMockData()}static getInstance(){return c.instance||(c.instance=new c),c.instance}async listUpcoming(a,t){return await new Promise(n=>setTimeout(n,200)),this.mockMatches.filter(n=>n.kickoff>=a&&n.kickoff<=t&&n.status==="upcoming")}async getMatch(a){return await new Promise(t=>setTimeout(t,100)),this.mockMatches.find(t=>t.matchId===a)||null}async getPlayers(a){return await new Promise(t=>setTimeout(t,150)),this.mockPlayers.filter(t=>t.matchId===a)}updateCurationState(a,t,n){const o=this.mockMatches.find(i=>i.matchId===a);if(o){const i=o.curationState;o.curationState=t,o.lastUpdated=new Date,o.auditTrail.push({id:crypto.randomUUID(),who:n,what:`Changed curation state from ${i} to ${t}`,entity:"match",before:{curationState:i},after:{curationState:t},when:new Date}),this.saveCurationState()}}bulkUpdateCuration(a,t,n){a.forEach(o=>{this.updateCurationState(o,t,n)})}async refreshFeed(){await new Promise(a=>setTimeout(a,1e3)),this.mockMatches.forEach(a=>{a.lastUpdated=new Date,a.popularity=Math.max(0,Math.min(100,a.popularity+(Math.random()-.5)*10))})}initializeMockData(){this.loadCurationState(),this.mockMatches.length===0&&this.generateMockMatches()}generateMockMatches(){const a=["EPL","LALIGA","UCL","BUNDESLIGA","SERIE_A","LIGUE_1"],t={EPL:["Arsenal","Chelsea","Liverpool","Man City","Man United","Tottenham"],LALIGA:["Real Madrid","Barcelona","Atletico Madrid","Sevilla","Valencia","Villarreal"],UCL:["Bayern Munich","PSG","Juventus","AC Milan","Inter Milan","Dortmund"],BUNDESLIGA:["Bayern Munich","Dortmund","RB Leipzig","Bayer Leverkusen","Wolfsburg","Frankfurt"],SERIE_A:["Juventus","AC Milan","Inter Milan","Napoli","Roma","Lazio"],LIGUE_1:["PSG","Marseille","Lyon","Monaco","Nice","Lille"]},n=new Date;for(let o=0;o<50;o++){const i=a[Math.floor(Math.random()*a.length)],s=t[i],e=s[Math.floor(Math.random()*s.length)];let r=s[Math.floor(Math.random()*s.length)];for(;r===e;)r=s[Math.floor(Math.random()*s.length)];const l=new Date(n.getTime()+Math.random()*7*24*60*60*1e3),d=Math.floor(Math.random()*100),u=["EPL","LALIGA","UCL"].includes(i)&&d>70,h={id:`match_${o+1}`,matchId:`feed_${Date.now()}_${o}`,league:i,home:e,away:r,homeTeam:e,awayTeam:r,homeTeamLogo:`/logos/${e.toLowerCase().replace(" ","_")}.png`,awayTeamLogo:`/logos/${r.toLowerCase().replace(" ","_")}.png`,kickoff:l,startTime:l,status:"upcoming",popularity:d,source:"MockFeed",lastUpdated:new Date,venue:`${e} Stadium`,lineupStatus:Math.random()>.3?"confirmed":"probable",odds:{home:1.5+Math.random()*2,draw:3+Math.random()*2,away:1.5+Math.random()*2},curationState:u?"curated":"feed_only",auditTrail:[],players:[]};this.mockMatches.push(h),this.generatePlayersForMatch(h.matchId,e,r)}}generatePlayersForMatch(a,t,n){const o=["goalkeeper","defender","midfielder","forward"],i={goalkeeper:2,defender:8,midfielder:8,forward:6};[t,n].forEach(s=>{o.forEach(e=>{for(let r=0;r<i[e];r++){const l={id:`${a}_${s}_${e}_${r}`,matchId:a,name:`${s} ${e} ${r+1}`,team:s,position:e==="goalkeeper"?"GK":e==="defender"?"DEF":e==="midfielder"?"MID":"FWD",role:e,credits:e==="goalkeeper"?5+Math.random()*3:e==="defender"?6+Math.random()*4:e==="midfielder"?7+Math.random()*5:8+Math.random()*6,points:0,selectedBy:Math.random()*100,isPlaying:Math.random()>.1,meta:{injuryStatus:Math.random()>.8?"doubtful":"fit",form:Math.random()*10,value:1e6+Math.random()*5e7}};this.mockPlayers.push(l)}})})}saveCurationState(){if(typeof localStorage<"u"){const a=this.mockMatches.map(t=>({matchId:t.matchId,curationState:t.curationState,auditTrail:t.auditTrail}));localStorage.setItem("picknwin_curation_state",JSON.stringify(a))}}loadCurationState(){if(typeof localStorage<"u"){const a=localStorage.getItem("picknwin_curation_state");if(a){const t=JSON.parse(a);this.applySavedCurationStates=t}}}applySavedCurationStates=[]}const m=c.getInstance();export{m as f};
