name: Deploy API to Fly.io

on:
  push:
    branches: [main]
    paths:
      - 'apps/api/**'
      - 'packages/shared-types/**'
      - '.github/workflows/api-deploy-fly.yml'
  workflow_dispatch:

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  ELIXIR_VERSION: '1.16.0'
  OTP_VERSION: '26.2.1'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: picknwin_api_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run Credo
        run: mix credo --strict

      - name: Run tests
        run: mix test
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/picknwin_api_test

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ./apps/api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Run database migrations
        run: flyctl ssh console --command "/app/bin/migrate"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}